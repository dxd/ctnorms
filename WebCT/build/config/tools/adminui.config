/*
 * Configuration for the GigaSpaces Service Grid Administration User Interface
 */

import org.jini.rio.boot.BootUtil;
import com.j_spaces.kernel.SystemProperties;

/*
 * Sets system properties for the UI
 */
com.gigaspaces.start {
    /* System properties to set */
    systemProperties = 
        new String[] {"com.gs.start-embedded-lus", "false"};
}

/* 
 * Jini lookup discovery groups. The default is set to look for 
 * DiscoveryGroupManagement.ALL groups. Uncomment the following 
 * declaration to refine the groups to discover, and provide the group 
 * name(s) 
 */
com.gigaspaces.admin {
    groups = BootUtil.toArray("${com.gs.jini_lus.groups}");
    locators = BootUtil.toLookupLocators("${com.gs.jini_lus.locators}");

}

/*
 * Lookup Discovery attribute which controls how often Lookup Discovery examines the 
 * multicast announcements from previously discovered lookup services for liveness.
 */
net.jini.discovery.LookupDiscovery {
    multicastAnnouncementInterval=5000;
	taskManager = new com.sun.jini.thread.TaskManager(15, 30000, 3.0F, "UI LookupDiscovery Task", 10);
}

net.jini.discovery.LookupLocatorDiscovery {
	taskManager = new com.sun.jini.thread.TaskManager(15, 30000, 3.0F, "UI LookupLocatorDiscovery Task", 10);
}

net.jini.lease.LeaseRenewalManager {
	taskManager = new com.sun.jini.thread.TaskManager(11, 15000, 1.0F, "UI LeaseRenewalManager Task", 10);
}

net.jini.lookup.JoinManager {
	taskManager = new com.sun.jini.thread.TaskManager(15, 30000, 1.0F, "UI JoinManager Task", 10);
}

/* -----------------------------------------------------------------------------
 * GigaSpaces LRMI Communication Protocol Configuration
 * For more details please refer to the Wiki documentation page
 * at http://www.gigaspaces.com/wiki/display/XAP91/Communication+Protocol
 * ---------------------------------------------------------------------------*/
com.gigaspaces.transport {
	
	bindHost = BootUtil.getHostAddress();
	bindPort = System.getProperty("com.gs.transport_protocol.lrmi.bind-port", "0");

	minThreads  = Integer.parseInt( System.getProperty("com.gs.transport_protocol.lrmi.min-threads", "1") );
	maxThreads  = Integer.parseInt( System.getProperty("com.gs.transport_protocol.lrmi.max-threads", "128") );
	maxConnPool = Integer.parseInt( System.getProperty("com.gs.transport_protocol.lrmi.max-conn-pool", "1024") );
	readSelectorThreads = Integer.parseInt( System.getProperty("com.gs.transport_protocol.lrmi.selector.threads", "1") );

	//LRMI Watchdog parameters
	watchdogRequestTimeout = System.getProperty("com.gs.transport_protocol.lrmi.request_timeout", "30s");
	watchdogListeningTimeout = System.getProperty("com.gs.transport_protocol.lrmi.listening_timeout", "5m");
	watchdogIdleConnectionTimeout = System.getProperty("com.gs.transport_protocol.lrmi.idle_connection_timeout", "15m");

	//LRMI ThreadPool idle timeout default is 5 min.
	threadPoolIdleTimeout = Long.parseLong(System.getProperty("com.gs.transport_protocol.lrmi.threadpool.idle_timeout", "300000"));
	threadPoolQueueSize = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.threadpool.queue-size", Integer.toString(Integer.MAX_VALUE)));

	//LRMI timeout on the Socket connect. Default connect timeout in seconds is 30.
	socketConnectTimeout = System.getProperty("com.gs.transport_protocol.lrmi.connect_timeout", "0");
	
	//Slow consumer parameters
	slowConsumerEnabledKey = "com.gs.transport_protocol.lrmi.slow-consumer.enabled";
	slowConsumerEnabled = Boolean.parseBoolean(System.getProperty(slowConsumerEnabledKey, String.valueOf(false)));
	//If slow consumer is not enabled, reset slow consumer throughput to 0 because this is how the mechanism recognizes it is not enabled
	slowConsumerThroughputKey = "com.gs.transport_protocol.lrmi.slow-consumer.throughput";
	slowConsumerThroughput = Integer.parseInt(System.getProperty(slowConsumerThroughputKey, "0"));
	slowConsumerRetries = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.slow-consumer.retries", String.valueOf(3)));
	slowConsumerLatency = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.slow-consumer.latency", String.valueOf(500)));
	slowConsumerReadTimeout = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.slow-consumer.read-timeout", String.valueOf(2000)));
	
	systemPriorityQueueCapacity = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.queue-size", String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_QUEUE_CAPACITY_DEFAULT)));
	systemPriorityThreadPoolIdleTimeout = Long.parseLong(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.idle_timeout", String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_THREAD_IDLE_TIMEOUT)));
	systemPriorityMinThreads = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.min-threads", String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_MIN_THREADS_DEFAULT)));
	systemPriorityMaxThreads = Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.max-threads", String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_MAX_THREADS_DEFAULT)));
	protocolValidationEnabled = true; /* hard coded becasue ! doesn't seem to apply in this config file */
	
	nioConfig = new com.gigaspaces.config.lrmi.nio.NIOConfiguration( minThreads, /* min executors threads */
																	 maxThreads, /* max executors threads */
																	 maxConnPool, /* maxConnPool */
																	 bindHost, /*  if null resolves to the localhost IP address */
																	 bindPort, /* if 0 any next free port will be used for incoming client requests.*/
																	 threadPoolQueueSize,
																	 slowConsumerThroughput,
																	 slowConsumerLatency,
																	 slowConsumerRetries,
																	 slowConsumerReadTimeout,
																	 readSelectorThreads,
																	 watchdogRequestTimeout,
																	 watchdogListeningTimeout,
																	 watchdogIdleConnectionTimeout,
																	 threadPoolIdleTimeout,
																	 socketConnectTimeout, 
																	 systemPriorityQueueCapacity,
																	 systemPriorityThreadPoolIdleTimeout,
																	 systemPriorityMinThreads,
																	 systemPriorityMaxThreads, 
																	 protocolValidationEnabled
																	);
																	
    // uncomment the following next line to use Jrmp (RMI) exporter instead of GenericExporter (NIO based)
    // defaultExporter = new net.jini.jrmp.JrmpExporter();
    defaultExporter = new com.gigaspaces.lrmi.GenericExporter( nioConfig );
}

/* -----------------------------------------------------------------------------
 * Default exporter to use for the ServiceDiscoveryManager is the same as the
 * exporter declared above
 * ---------------------------------------------------------------------------*/
net.jini.lookup.ServiceDiscoveryManager {
	cacheTaskManager = new com.sun.jini.thread.TaskManager(20, 15000, 1.0F, "UI SDM Cache Task", 10);
	discardTaskManager = new com.sun.jini.thread.TaskManager(10, 15000, 1.0F, "UI SDM Discard Task", 10);
    eventListenerExporter = com.gigaspaces.transport.defaultExporter;
}

org.jini.rio {
    defaultExporter = com.gigaspaces.transport.defaultExporter;
}
