Facts:
%group obligation

norm(
    collectA,
    ([],
     [coordinator(Agent1), object(A), at(X,Y,A)]
    ), 
    obligation([Agent1],[collect(A)],now + 20,[reduce(Agent1, 1000)]) 
    ).
    
norm(
    collectA1,
    ([collectA(_)],
     [agent(Agent2)]
    ),
    obligation([Agent2],[collect(A)],now + 20,[reduce(Agent2, 1000)]) 
    ).
    
norm(
    collectA1b,
    ([collectA],
     [agent(Agent3)]
    ), 
    obligation([Agent3],[collect(A)],now + 20,[reduce(Agent3, 1000)]) 
    ).

norm(
    task1a(g),
    ([ group(g),object(X,Y,o3)],
    []
    ), 
    obligation([g],[collect_O4(X,Y)],now + 100,[reduce(c1,400)]) 
    ).
    
norm(
    collect_object_h1a(c1),
    ([agent(c1), object(X,Y,o3)], 
    []
    ),
    obligation([c1],[collect_O3(X,Y)],now + 50,[reduce(c1, 1000)]) 
    ).
    
norm(
    collectAb,
    ([],
     [coordinator(Agent1), object(at(X,Y),A)]
    ), 
    obligation([Agent1],[collect(A)],now + 20,[reduce(Agent1, 1000)]) 
    ).
    
%agents group norms tasks from coordinator player
norm(
    collect_object1(a1),
    a1, // the subject agent
    ( agent(a1), object(X,Y,o1), detached(task1(g))), 
    obligation([at(X,Y,a1)],now + 20,[reduce(a1, 100)]) 
    ).  
norm(
    collect_object2(a2),
    a2, // the subject agent
    ( agent(a2), object(X,Y,o2), detached(task1(g))), 
    obligation([at(X,Y,a2)],now + 20,[reduce(a2, 200)]) 
    ).

norm(
    collect_object3(a1),
    a1, // the subject agent
    ( agent(a1), object(X,Y,o3), collected(o1),detached(collect_object_h1(c1))), 
    obligation([at(X,Y,a1)],now + 20,[reduce(a1, 300)]) 
    ).  
norm(
    collect_object3(a2),
    a2, // the subject agent
    ( agent(a2), object(X,Y,o3), collected(o2),detached(collect_object_h1(c1))), 
    obligation([at(X,Y,a2)],now + 20,[reduce(a2, 300)]) 
    ).

norm(
    collect_object4(a1),
    a1, // the subject agent
    ( agent(a1), object(X,Y,o4), collected(o3),detached(task1(g))), 
    obligation([at(X,Y,a1)],now + 20,[reduce(a1, 400)]) 
    ).  
norm(
    collect_object4(a2),
    a2, // the subject agent
    ( agent(a2), object(X,Y,o4), collected(o3),detached(task1(g))), 
    obligation([at(X,Y,a2)],now + 20,[reduce(a2, 400)]) 
    ).
norm(
    collect_object4(c1),
    c1, // the subject agent
    ( agent(c1), object(X,Y,o4), collected(o3),detached(task1(g))), 
    obligation([at(X,Y,h2)],now + 20,[reduce(c1, 400)]) 
    ).


%individual obligation 
norm(
    collect_bonus(Player),
    Player, // the subject agent
    ( player(Player), near_bonus(X,Y)), 
    obligation([at(X,Y, Player,Time)],now + 10,[reduce(a1, 500)]) 
    ).  

%Individual prohibition.
%Prohibitions need to be valid indefinitely at the moment
norm(
    enter_water(Player),
    Player, // the subject agent
    ( player(Player), water(X,Y)),
    prohibition([at(X,Y, Player,Time)],[reduce(Player,300)]) 
    ). 

norm(
    leave_area(Player),
    Player, // the subject agent
    ( player(Player), outside_area(X,Y)),
    prohibition([at(X,Y, Player,Time)],[reduce(Player,300)])
    ). 

norm(
    exceed_speedlimit(Player),
    Player, // the subject agent
    ( player(Player), too_fast(X1,Y1,X2,Y2)),
    prohibition([at(X1,Y1, Player,Time1),at(X2,Y2, Player,Time2)],[reduce(Player,300)])
    ). 

    
//gensym(group_action, group_action1).
gensym(group_action,1).

object(1,1,o3).
object(5,5,o2).
object(7,6,o1).
object(9,10,o4).


agent(a1).
agent(a2).
agent(a3).
agent(a4).
agent(ra1).
agent(c1).
ra(ra1).
truck(t1).

group(g).


group_member(g,a1).
group_member(g,a2).
group_member(g,a3).
group_member(g,a4).
group_member(g,ra1).

//gensym(1).
//gensym(X,5).
//gensym(Prefix, NewNumber) :-
//	retract(gensym(Number)),
//	NewNumber is Number + 1,
//	assert(gensym(NewNumber)).
//	name(Number, NList),
//	concat(Prefix, NList, AList),
//	name(Atom, AList).
	
//sanction(a1,500,50).
//sanction(a2,500,50).
//sanction(a3,500,50).
//sanction(a4,500,50).

movable(A) :- agent(A).
movable(A) :- truck(A).

controller(c1).

coordinator(c2).

points(a1,1000).
points(a2,1000).
points(a3,1000).
points(a4,1000).
points(c1,1000).
points(t1,1000).

time_past(Time):- clock(Now), Now > Time.
time_since(Time):- clock(Now), Time > Now.

not_area(X,Y):-
	X is 20, int(Y), Y > 0, Y < 20;
	
not_area(X,Y):-
	Y is 20, int(X), X > 0, X < 20;

area(X,Y):-
	int(X), int(Y), X > 0, Y > 0, X < 21, Y < 21.
	
water(15,15).
water(15,16).
water(16,15).
water(16,16).

east(X,Y,EX,Y) :- EX is X + 1.
west(X,Y,EX,Y) :- EX is X - 1.
north(X,Y,X,EY) :- EY is Y + 1.
south(X,Y,X,EY) :- EY is Y - 1.

groupnorm(ra).

east(X,Y,A) :- EX is X + 1, at(EX,Y,A,Z).
west(X,Y,A) :- EX is X - 1, at(EX,Y,A,Z).
north(X,Y,A) :- EY is Y + 1, at(X,EY,A,Z).
south(X,Y,A) :- EY is Y - 1, at(X,EY,A,Z).

surround(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	reading(East,Y),
	reading(West,Y),
	reading(X,North),
	reading(X,South).

makeGroupReading(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	makeReading(East,Y),
	makeReading(West,Y),
	makeReading(X,North),
	makeReading(X,South).

tooFar(AX, AY, X, Y) :- false.

//do_sanction([not(H)|T]):- retract(H),do_sanction(T).
do_sanction([H|T]):- uniqueassertz(H),do_sanction(T).
do_sanction([]).

do_reduce_h(Group,P):- 
   @external(geoSenseMW,write(points(x,1,1),-1),_).
   
do_reduce_health(Agent,P):- 
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   @external(geoSenseMW,write(points(Agent,Now,NewHealth),-1),_).
   
do_reduce_health(Group,P):- 
   group(Group),
   clock(Now),
   policy1(g,1000),
   @external(geoSenseMW,write(points(Group,Now,NewHealth),-1),_).

//listTrue(_).
listTrue([H|T]):- H, listTrue(T).
listTrue([]).

clock(0).

//check(GN):-
//	setof(S, (group_member(G,A), sanction(A,S)),Ss),
//	sum(Ss,T), //sumlist
//	sanction(GN,GS),
//	GS =< T.
	
sanction([H|T],S):- do_reduce_health(H,S), sanction(T,S).
sanction([]).

//group sanctions
sanction_policy(1,policy1).
policy1(g,1000):-
    uniqueassertz(test(1)),
	findall(M,group_member(g,M),Vs),
	S is 1000 / length(Vs),
	uniqueassertz(povedlose(S)).
//	sanction(Vs,S).
	
//sanction_group(ID,g,1000):-
//	sanction_policy(ID,Policy),
//	call(Policy(g,1000)).


violated(M).


Effects:
{true} tuple_space_changed {true} // causes compliance checking

{clock(Old)} time(New) {not clock(Old), clock(New)}
{true} time(X) {clock(X)}

//{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {not at(X1,Y1,Agent), at(X,Y,Agent), at(X,Y,Agent,Clock), not coin(X,Y)}
//change to receive clock as well!!!!
//{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock)} 
//{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock), at(X,Y,Agent)}

//quick fix
{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock)}

//{reading(X,Y,Value1,Agent,Clock1)} reading(Agent, cell(X,Y), Value, Clock) {not reading(X,Y,Value1,Agent,Clock1), reading(X,Y,Value,Agent,Clock)}
{true} reading(Agent, cell(X,Y), Value, Clock) { reading(X,Y,Value,Agent,Clock)}

{true} coin(cell(X,Y), Clock, Agent) {coin(X,Y,Clock)}

{true} cargo(cell(X,Y), Clock) {cargo(X,Y,Clock)}

{true} groupCoin(X,Y, Clock) {groupCoin(X,Y,Clock)}

//{points(Agent,OldValue)} points(Agent, Clock, Value) {not points(Agent,OldValue), points(Agent,Value)}
{true} points(Agent, Clock, Value) {points(Agent,Value,Clock)}



Temporal norms:
agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)): 
	[norm(Label,Agent,Pre,obligation(ListA,Deadline,Sanction)) and Pre, 
	O(listTrue(ListA)), 
	time_past(Deadline)]

agent_directed(Label,Agent,prohibition(ListA,Sanction)): 
	[norm(Label,Agent,Pre,prohibition(ListA,Sanction)) and Pre, 
	F(listTrue(ListA)), 
	false]

Sanction rules:
reduce(Agent,X) and do_reduce_health(Agent,X) => not reduce(Agent,X).

viol(agent_directed(Label,Agent,prohibition(State,Sanction))), do_sanction(Sanction) => not viol(agent_directed(Label,Agent,prohibition(State,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))), group(Label), do_sanction_g(Sanction) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))), individual(Label), do_sanction_i(Sanction) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).

obey(agent_directed(Label,Agent,Deontic)) => not obey(agent_directed(Label,Agent,Deontic)).
