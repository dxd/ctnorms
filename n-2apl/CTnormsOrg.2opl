Facts:

%RA group surround
//norm(
//    sanction_group(ra1),
//    ra1, // the subject agent
//    ( ra(ra1), sanction(Group,Sanction)), // precondition
//    obligation([atleast(agent_sanctions(g),Sanction)],now+15,[reduce(ra1,Sanction)]) // prohibition format
//    ).


     
%group surround
norm(
    group_surround(g),
    ra1, // the subject agent

    ( group(g), goal(X,Y,Z)), // precondition - left blank for now
    obligation([surround(X,Y)],now + 10,[reduce(g,1000)]) // prohibition format

    ).
    
%agents group norms from RA
norm(

    group_task(a10),
    a10, // the subject agent
    ( pursuer(a10), detached(group_surround(g)),goal(X,Y,Z)), // precondition - add triggering condition
    obligation([west(X,Y,a10)],now + 10,[reduce(a10, 1000)]) // prohibition format
    ).  
   
   
    
norm(
    group_task(a20),
    a20, // the subject agent
    ( pursuer(a20), detached(group_surround(g)),goal(X,Y,Z)), // precondition - add triggering condition
    obligation([east(X,Y,a20)],now + 10,[reduce(a20, 1000)]) // prohibition format
    ).  




%individual prohibitions to use colored tiles
norm(
enter_color(Thing),
Thing, // the subject agent
( pursuer(Thing), color(Thing,Color)), // precondition
prohibition([color(Color,Thing)],[reduce(Thing,300)]) // prohibition format
).

%original norms
norm(
    enter_water(Thing),
    Thing, // the subject agent
    ( pursuer(Thing), water(X,Y)), // precondition
    prohibition([at(X,Y,Thing,Z)],[reduce(Thing,300)]) // prohibition format
    ). 
    
//gensym(group_action, group_action1).
gensym(group_action,1).


pursuer(a10).
pursuer(a20).
pursuer(ra1).

group(g).
group_member(g,a10).
group_member(g,a20).

group_member(g,ra1).

color(a1,red).
color(a2,blue).
color(a3,green).
color(a4,yellow).

//gensym(1).
//gensym(X,5).
//gensym(Prefix, NewNumber) :-
//	retract(gensym(Number)),
//	NewNumber is Number + 1,
//	assert(gensym(NewNumber)).
//	name(Number, NList),
//	concat(Prefix, NList, AList),
//	name(Atom, AList).
	
//sanction(a1,500,50).
//sanction(a2,500,50).
//sanction(a3,500,50).
//sanction(a4,500,50).

movable(A) :- agent(A).
movable(A) :- truck(A).

controller(c1).

coordinator(c2).

points(a1,1000).
points(a2,1000).
points(a3,1000).
points(a4,1000).
points(c1,1000).
points(t1,1000).

time_past(Time):- clock(Now), Now > Time.
time_since(Time):- clock(Now), Time > Now.

not_area(X,Y):-
	X is 20, int(Y), Y > 0, Y < 20;
	
not_area(X,Y):-
	Y is 20, int(X), X > 0, X < 20;

area(X,Y):-
	int(X), int(Y), X > 0, Y > 0, X < 21, Y < 21.
	
water(15,15).
water(15,16).
water(16,15).
water(16,16).

east(X,Y,EX,Y) :- EX is X + 1.
west(X,Y,EX,Y) :- EX is X - 1.
north(X,Y,X,EY) :- EY is Y + 1.
south(X,Y,X,EY) :- EY is Y - 1.

groupnorm(ra).

east(X,Y,A) :- EX is X + 1, at(EX,Y,A,Z).
west(X,Y,A) :- EX is X - 1, at(EX,Y,A,Z).
north(X,Y,A) :- EY is Y + 1, at(X,EY,A,Z).
south(X,Y,A) :- EY is Y - 1, at(X,EY,A,Z).

surround(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	reading(East,Y),
	reading(West,Y),
	reading(X,North),
	reading(X,South).

makeGroupReading(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	makeReading(East,Y),
	makeReading(West,Y),
	makeReading(X,North),
	makeReading(X,South).

tooFar(AX, AY, X, Y) :- false.

//do_sanction([not(H)|T]):- retract(H),do_sanction(T).
do_sanction([H|T]):- uniqueassertz(H),do_sanction(T).
do_sanction([]).

do_reduce_h(Group,P):- 
   @external(ctMW,write(points(x,1,1),-1),_).
   
do_reduce_health(Agent,P):- 
   pursuer(Agent),
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   @external(ctMW,write(points(Agent,Now,NewHealth),-1),_).
   
do_reduce_health(Group,P):- 
   group(Group),
   clock(Now),
   policy1(g,1000),
   @external(ctMW,write(points(Group,Now,NewHealth),-1),_).

//listTrue(_).
listTrue([H|T]):- H, listTrue(T).
listTrue([]).

clock(0).

//check(GN):-
//	setof(S, (group_member(G,A), sanction(A,S)),Ss),
//	sum(Ss,T), //sumlist
//	sanction(GN,GS),
//	GS =< T.
	
sanction([H|T],S):- do_reduce_health(H,S), sanction(T,S).
sanction([]).

//group sanctions
sanction_policy(1,policy1).
policy1(g,1000):-
    uniqueassertz(test(1)),
	findall(M,group_member(g,M),Vs),
	S is 1000 / length(Vs),
	uniqueassertz(povedlose(S)).
//	sanction(Vs,S).
	
//sanction_group(ID,g,1000):-
//	sanction_policy(ID,Policy),
//	call(Policy(g,1000)).


violated(M).


Effects:
{true} tuple_space_changed {true} // causes compliance checking

{clock(Old)} time(New) {not clock(Old), clock(New)}
{true} time(X) {clock(X)}

//{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {not at(X1,Y1,Agent), at(X,Y,Agent), at(X,Y,Agent,Clock), not coin(X,Y)}
//change to receive clock as well!!!!
//{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock)} 
//{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock), at(X,Y,Agent)}

//quick fix
{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock)}

//{reading(X,Y,Value1,Agent,Clock1)} reading(Agent, cell(X,Y), Value, Clock) {not reading(X,Y,Value1,Agent,Clock1), reading(X,Y,Value,Agent,Clock)}
{true} reading(Agent, cell(X,Y), Value, Clock) { reading(X,Y,Value,Agent,Clock)}


{true} goal(cell(X,Y), Clock) {goal(X,Y,Clock)}
{true} proposal(Id,A1,A1,Clock) {proposal(Id,A1,A1,Clock)}
{true} response(Id,X,Clock) {response(Id,X,Clock)}
{true} tile(X,Y,Color,Clock) {not tile(X,Y,Z,Clock), tile(X,Y,Color,Clock)}
{true} chip(Id,Color,X,Clock) {chip(Id,Color,X,Clock)}


{true} cargo(cell(X,Y), Clock) {cargo(X,Y,Clock)}

{true} groupCoin(X,Y, Clock) {groupCoin(X,Y,Clock)}

//{points(Agent,OldValue)} points(Agent, Clock, Value) {not points(Agent,OldValue), points(Agent,Value)}
{true} points(Agent, Clock, Value) {points(Agent,Value,Clock)}



Temporal norms:
agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)): 
	[norm(Label,Agent,Pre,obligation(ListA,Deadline,Sanction)) and Pre, 
	O(listTrue(ListA)), 
	time_past(Deadline)]

agent_directed(Label,Agent,prohibition(ListA,Sanction)): 
	[norm(Label,Agent,Pre,prohibition(ListA,Sanction)) and Pre, 
	F(listTrue(ListA)), 
	false]

Sanction rules:
reduce(Agent,X) and do_reduce_health(Agent,X) => not reduce(Agent,X).

viol(agent_directed(Label,Agent,prohibition(State,Sanction))), do_sanction(Sanction) => not viol(agent_directed(Label,Agent,prohibition(State,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))), group(Label), do_sanction_g(Sanction) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).
viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))), individual(Label), do_sanction_i(Sanction) => not viol(agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction))).

obey(agent_directed(Label,Agent,Deontic)) => not obey(agent_directed(Label,Agent,Deontic)).
